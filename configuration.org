#+TITLE: Emacs Configuration
#+AUTHOR: Jade Lin
#+EMAIL: linw1995@icloud.com

* Misc
** Proxy Configuration

#+BEGIN_SRC emacs-lisp
  (setq url-proxy-services
     '(("no_proxy" . "^\\(localhost\\|10\\..*\\|192\\.168\\..*\\)")
       ("http" . "localhost:1081")
       ("https" . "localhost:1081")))
#+END_SRC

** Disable Byte Compile Warnings

#+BEGIN_SRC emacs-lisp
  (setq-local byte-compile-warnings '(cl-functions))
#+END_SRC

** MacOS

Dired is a directory editor on Emacs. It uses =ls= program.
On macOS, ls does not support =--dired= option.
Appending below codes into =.emacs= file to configure dired using =ls= without =--dired=.

#+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
#+END_SRC

** Helper Functions

#+BEGIN_SRC emacs-lisp
  (defun my/get-color (name)
    (if (require 'doom-themes nil t)
        (doom-color name)
      (symbol-name name)))
#+END_SRC

* Package Managing

Bootstrapping [[https://github.com/raxod502/straight.el][straight.el]].

#+BEGIN_SRC emacs-lisp :tangle no
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Integration with [[https://github.com/jwiegley/use-package][use-package]].

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq-default use-package-always-defer t)
#+END_SRC

* Profiler

#+BEGIN_SRC emacs-lisp
  (use-package esup
    :straight t
    :commands (esup))
#+END_SRC

* Editor Configuration

Change cursor type.
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC

Show line number.
#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
#+END_SRC

Show column number.
#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

Don't create backup files.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

Delete selection while inserting.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

Highlight line where cursor lying on.
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

Wrap lines at word boundary.
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC

Multi-cursors support.
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :straight t)
#+END_SRC

*** Tabs and Spaces

Plenty of codes are copied from [[https://dougie.io/emacs/indentation/][The Ultimate Guide To Indentation in Emacs (Tabs and Spaces)]].

#+BEGIN_SRC emacs-lisp
  (defcustom custom-tab-width 4
    "Integer for customizing the tab size")

  (defun tabs-disable ()
    (interactive)
    (setq indent-tabs-mode nil))

  (defun tabs-enable ()
    (interactive)
    (local-set-key (kbd "TAB") 'tab-to-tab-stop)
    (setq indent-tabs-mode t)
    (setq tab-width custom-tab-width))

  ;; Making electric-indent behave sanely
  (setq-default electric-indent-inhibit t)

  ;; Make the backspace properly erase the tab instead of
  ;; removing 1 space at a time.
  (setq backward-delete-char-untabify-method 'hungry)

  (use-package whitespace
    :delight
    global-whitespace-mode
    whitespace-mode
    :config
    (setq whitespace-line-column 80)
     ;; This will also show trailing characters as they are useful to spot.
    (setq whitespace-style '(face tabs tab-mark trailing))
    (custom-set-faces
     `(whitespace-tab ((t (:foreground ,(my/get-color 'red))))))
    (setq whitespace-display-mappings
          '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
    (global-whitespace-mode) ; Enable whitespace mode everywhere
    :hook ((magit-section-mode . (lambda ()
                                   (setq-local whitespace-style nil)))
           (org-src-mode . whitespace-mode)) ; Manually activite whitespace
    )
#+END_SRC

No Tabs by default.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** wrap region

#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :straight (:type git :host github repo "rejeep/wrap-region.el")
    :delight
    :hook ((python-mode . wrap-region-mode)))
#+END_SRC

*** Syntax Highlighting

#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
    :straight t
    :hook
    ((python-mode . tree-sitter-hl-mode))
    :config
  ;;;; Smart f-strings
    ;; https://github.com/ubolonton/emacs-tree-sitter/issues/52
    (defun fk/python-f-string-ify (&rest _)
      ;; Does nothing if major-mode is not python or point is not on a string.
      (when-let* ((python-mode-p (eq major-mode 'python-mode))
                  (str (tree-sitter-node-at-point 'string))
                  (text (ts-node-text str)))
        (let ((is-f-string (string-match-p "^[bru]*f+[bru]*\\(\"\\|'\\)" text))
              (should-f-string (and (s-contains-p "{" text)
                                    (s-contains-p "}" text))))
          (if should-f-string
              (unless is-f-string
                (save-excursion
                  (goto-char (ts-node-start-position str))
                  (insert "f")))
            (when is-f-string
              (save-excursion
                (goto-char (ts-node-start-position str))
                (when (char-equal (char-after) ?f)
                  (delete-char 1))))))))

    ;; When not using wrap-region or anything that changes "{" keybinding
    ;; (define-key python-mode-map (kbd "{") (lambda ()
    ;;                                         (interactive)
    ;;                                         (call-interactively 'self-insert-command)
    ;;                                         (fk/python-f-string-ify)))

    (defadvice wrap-region-trigger (after smart-f-string activate)
      (fk/python-f-string-ify))
    (defadvice delete-char (after smart-f-string activate)
      (fk/python-f-string-ify))
    (defadvice delete-active-region (after smart-f-string activate)
      (fk/python-f-string-ify)))

  (use-package tree-sitter-langs
    :straight t
    :demand)
#+END_SRC

* Key Binding Configuration

*** iTerm Integration

For avoiding unexpected behavior of key bindings,
due to the terminal sends incomplete key events,
we need to configure iTerm key bindings to send escape sequence codes,
and, the Emacs should parse escape sequence codes sent from iTerm and should emit the actual key events.
See [[https://stackoverflow.com/a/40222318/7035932][Stackoverflow Answer]] for more details.

#+BEGIN_SRC emacs-lisp
  (defun my/global-map-and-set-key (key command &optional prefix suffix)
     "`my/map-key' KEY then `global-set-key' KEY with COMMAND.
   PREFIX or SUFFIX can wrap the key when passing to `global-set-key'."
     (my/map-key key)
     (global-set-key (kbd (concat prefix key suffix)) command))

  (defun my/map-key (key)
     "Map KEY from escape sequence \"\e[emacs-KEY\."
     (define-key function-key-map (concat "\e[emacs-" key) (kbd key)))

#+END_SRC

*** Toggle Visibility of Shell Buffer

#+BEGIN_SRC emacs-lisp
  (my/global-map-and-set-key "C-\`" 'toggle-shell-splited-window)
  (my/global-map-and-set-key "C-s-\`" 'toggle-shell)
#+END_SRC

* Shell Configuration

Support ANSI & xterm-256 color

#+BEGIN_SRC emacs-lisp
  (use-package xterm-color
    :straight t
    :config
    (when (derived-mode-p 'eshell-mode)
      (add-to-list 'eshell-preoutput-filter-functions
                   'xterm-color-filter)
      (setq eshell-output-filter-functions
            (remove 'eshell-handle-ansi-color
                    eshell-output-filter-functions))
      (setenv "TERM" "xterm-256color"))
    :hook
    ((shell-mode . (lambda ()
                     (font-lock-mode -1)
                     (make-local-variable 'font-lock-function)
                     (setq font-lock-function (lambda (_) nil))
                     (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))
     (eshell-before-prompt . (lambda ()
                               (setq xterm-color-preserve-properties t)))))
#+END_SRC

Ensure environment variables inside Emacs look the same as in the user's shell.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :if (memq window-system '(mac ns))
    :init
    (setq exec-path-from-shell-check-startup-files nil
          exec-path-from-shell-variables '("PATH")
          exec-path-from-shell-arguments '("-l"))
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

Create =toggle-shell= command to toggle visibility of shell buffer.

#+BEGIN_SRC emacs-lisp
  ; Get shell executable path from environment variables.
  (setq explicit-shell-file-name (getenv "SHELL"))

  (defvar toggle-shell--shell-buffer nil)
  (defvar toggle-shell--shell-splited-window nil)
  (defvar toggle-shell--previous-window-configuration nil)

  (defun toggle-shell--dump-window-configuration ()
    (setq toggle-shell--previous-window-configuration
          (current-window-configuration)))

  (defun toggle-shell--restore-window-configuration ()
    (set-window-configuration toggle-shell--previous-window-configuration))

  (defun toggle-shell--in-shell-splited-window? ()
    "Test current buffer is shell buffer and is in splited window."
    (and (toggle-shell--in-shell?)
         toggle-shell--shell-splited-window
         (equal (selected-window) toggle-shell--shell-splited-window) ; test selected window is splited window
         ))

  (defun toggle-shell--in-shell? ()
    "Test current buffer is shell buffer."
    (and toggle-shell--shell-buffer ; test var of shell buffer is not nil
         (equal (current-buffer) toggle-shell--shell-buffer)) ; test current buffer is shell buffer
    )

  (defun toggle-shell--shell-buffer-existed? ()
    "Test shell buffer existed."
    (and toggle-shell--shell-buffer ; test shell buffer is not nill
         (buffer-name toggle-shell--shell-buffer)) ; test shell buffer is not killed
    )

  (defun toggle-shell--ensure-shell-buffer ()
    "Ensure the shell buffer existed."
    (unless (toggle-shell--shell-buffer-existed?)
      (toggle-shell--dump-window-configuration)
      ;(setq toggle-shell--shell-buffer (ansi-term explicit-shell-file-name)) ; create new shell buffer
      (setq toggle-shell--shell-buffer (eshell)) ; create new shell buffer
      (toggle-shell--restore-window-configuration)))

  (defun toggle-shell--switch-to-shell ()
    "Make shell buffer current."
    (when (toggle-shell--in-shell-splited-window?)
      (toggle-shell--restore-window-configuration))
    (unless (toggle-shell--in-shell?)
      (toggle-shell--ensure-shell-buffer)
      (toggle-shell--dump-window-configuration)
      (switch-to-buffer toggle-shell--shell-buffer)))

  (defun toggle-shell--delete-shell ()
    "Delete the shell buffer window"
    (when (toggle-shell--shell-buffer-existed?)
      (let ((window) (get-buffer-window toggle-shell--shell-buffer))
        (if window
            (delete-window window)
          (toggle-shell--restore-window-configuration)))))

  (defun toggle-shell--delete-shell-splited-window ()
    "Delete the shell buffer splited window"
    (when (toggle-shell--in-shell-splited-window?)
      (delete-window toggle-shell--shell-splited-window)))

  (defun toggle-shell--switch-to-shell-splited-window ()
    "Split the current window set the bottom one as shell."
    (unless (toggle-shell--in-shell-splited-window?)
      (when (toggle-shell--in-shell?)
        (toggle-shell--restore-window-configuration))
      (toggle-shell--ensure-shell-buffer)
      (toggle-shell--dump-window-configuration)
      (split-window)
      (setq toggle-shell--shell-splited-window (window-next-sibling))
      (set-window-buffer (window-next-sibling)
                         toggle-shell--shell-buffer)
      (select-window (window-next-sibling))))

  (defun toggle-shell ()
    "Toggle visibility of shell buffer.
  1) If in shell buffer and in full window, switch to previous buffer.
  2) If in shell buffer and in splited window, switch to full window.
  3) If in other buffer, switch to shell buffer in full window."
    (interactive)
    (cond ((toggle-shell--in-shell-splited-window?) (toggle-shell--switch-to-shell))
          ((toggle-shell--in-shell?) (toggle-shell--delete-shell))
          (t (toggle-shell--switch-to-shell))))

  (defun toggle-shell-splited-window ()
    "Toggle visibility of shell buffer window and focused.
  1) If in other buffer, switch to shell buffer in half window.
  2) If in shell buffer and in full window, switch to half window.
  3) If in shell buffer and in splited window, delete the shell buffer window."
    (interactive)
    (cond ((toggle-shell--in-shell-splited-window?) (toggle-shell--delete-shell-splited-window))
          (t (toggle-shell--switch-to-shell-splited-window))))
#+END_SRC

* Appearance Configuration
** Frames Management

#+BEGIN_SRC emacs-lisp
  (use-package persp-mode
    :straight t
    :hook
    (window-setup
     . (lambda ()
         (when-let (project-root (projectile-project-root))
           (setq-default persp-save-dir
                         (expand-file-name ".persp-confs/" project-root))
           (persp-mode 1))))
    :config
    (setq wg-morph-on nil) ;; switch off animation
    (setq persp-autokill-buffer-on-remove 'kill-weak)
    (add-to-list 'persp-filter-save-buffers-functions
                 (lambda (b)
                   "Ignore temporary buffers."
                   (let ((bname (file-name-nondirectory (buffer-name b))))
                     (or (string-prefix-p "magit" bname)
                         (string-equal "*ansi-term*" bname)
                         (string-prefix-p "*" bname)
                         ;; and more
                         )))))
#+END_SRC

** Enables you to customise the mode names displayed in the mode line.

#+BEGIN_SRC emacs-lisp
  (use-package delight
    :straight t
    :hook
    ('after-init
     . (lambda ()
         (require 'delight)
         (delight '((eldoc-mode nil t)
                    (auto-fill-function " AF")
                    (visual-line-mode nil t)
                    (auto-revert-mode nil t)
                    (tree-sitter-mode nil t)
                    (page-break-lines-mode nil t)
                    (wrap-region-mode nil t)
                    (wakatime-mode nil t)
                    (whitespace-mode nil t))))))
#+END_SRC

** Theme Configuration

Use [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]].
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight t
    :demand
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

** GUI Configuration
*** Common
Disable dialog box.
#+BEGIN_SRC emacs-lisp
  (setq use-file-dialog        nil
        use-dialog-box         nil)
#+END_SRC

Hide toolbar.
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
#+END_SRC

Hide scrollbar.
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'set-scroll-bar-mode)
    (set-scroll-bar-mode nil))
#+END_SRC

Startup Window Size.
#+BEGIN_SRC emacs-lisp
  (when window-system
    (set-frame-size (selected-frame)
                    160
                    50))
#+END_SRC

*** MacOS

Make the title bar and toolbar to be transparent.
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist
                 '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist
                 '(ns-appearance . dark)))
#+END_SRC

Change the opacity of the frame.
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (add-to-list 'default-frame-alist
                 '(alpha . (100 . 100))))
#+END_SRC

** Dashboard

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :straight t
    :demand
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5))))
#+END_SRC

Hide the original startup screen while opening file.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

** Icons

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :straight t)
#+END_SRC

** Directory Tree View

Use [[https://github.com/jaypei/emacs-neotree][neotree]] package.

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :straight t
    :bind ("<f8>" . neotree-toggle))
#+END_SRC

** Rainbow Delimiters

Use [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] to highlights delimiters such as parentheses, brackets or braces according to their depth.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :delight
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (racket-mode . rainbow-delimiters-mode)
           (racket-repl-mode . rainbow-delimiters-mode)))
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  ;;; base on https://gist.github.com/Superbil/7113937
  ;;; base on https://gist.github.com/coldnew/7398835
  (defvar emacs-english-font nil
    "The font name of English.")

  (defvar emacs-cjk-font nil
    "The font name for CJK.")

  (defvar emacs-font-size-pair nil
    "Default font size pair for (english . chinese)")

  (defvar emacs-font-size-pair-list nil
    "This list is used to store matching (englis . chinese) font-size.")

  (defun font-exist-p (fontname)
    "test if this font is exist or not."
    (if (or (not fontname) (string= fontname ""))
        nil
      (if (not (x-list-fonts fontname))
          nil t)))

  (defun set-font (english chinese size-pair)
    "Setup emacs English and Chinese font on x window-system."
    (if (font-exist-p english)
        (set-frame-font (format "%s:pixelsize=%d" english (car size-pair)) t))

    (if (font-exist-p chinese)
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
          (set-fontset-font (frame-parameter nil 'font) charset
                            (font-spec :family chinese :size (cdr size-pair))))))

  (defun emacs-step-font-size (step)
    "Increase/Decrease emacs's font size."
    (let ((scale-steps emacs-font-size-pair-list))
      (if (< step 0) (setq scale-steps (reverse scale-steps)))
      (setq emacs-font-size-pair
            (or (cadr (member emacs-font-size-pair scale-steps))
                emacs-font-size-pair))
      (when emacs-font-size-pair
        (message "emacs font size set to %.1f" (car emacs-font-size-pair))
        (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair))))

  (defun increase-emacs-font-size ()
    "Decrease emacs's font-size acording emacs-font-size-pair-list."
    (interactive) (emacs-step-font-size 1))

  (defun decrease-emacs-font-size ()
    "Increase emacs's font-size acording emacs-font-size-pair-list."
    (interactive) (emacs-step-font-size -1))

  (setq list-faces-sample-text
        (concat
         "ABCDEFTHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\n"
         "11223344556677889900       壹貳參肆伍陸柒捌玖零"))

  (when window-system
    ;; setup change size font, base on emacs-font-size-pair-list
    (global-set-key (kbd "C-M-=") 'increase-emacs-font-size)
    (global-set-key (kbd "C-M--") 'decrease-emacs-font-size)

    ;; setup default english font and cjk font
    (setq emacs-english-font "Hack nerd Font Mono")
    (setq emacs-cjk-font "Noto Sans Mono CJK SC")
    (setq emacs-font-size-pair '(13 . 13))
    (setq emacs-font-size-pair-list '((13 . 13) (14 . 14) (15 . 15)))
    ;; Setup font size based on emacs-font-size-pair
    (set-font emacs-english-font emacs-cjk-font emacs-font-size-pair))
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (defun +simple-mode-line-render (left right)
    "Return a string of `window-width' length containing LEFT, and RIGHT
   aligned respectively."
    (let* ((available-width (- (window-width) (length left) 2)))
      (format (format " %%s %%%ds " available-width) left right)))

  (setq-default mode-line-format
                '((:eval
                   (+simple-mode-line-render
                    ;; left
                    (format-mode-line
                     '(" %l:%C "
                       (:eval (when (bound-and-true-p flycheck-mode) flycheck-mode-line))))
                    ;; right
                    (format-mode-line
                     '((:eval (when (functionp #'+smart-file-name) (+smart-file-name)))
                       "%* %m"
                       (vc-mode vc-mode)))))))
#+END_SRC

* Project Managing Configuration

Use [[https://docs.projectile.mx/projectile/index.html][projectile]] package.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :delight
    '(:eval (concat " [" (projectile-project-name) "]"))
    :bind-keymap ("C-c p" . projectile-command-map)
    :config
    (projectile-mode +1)
    (setq projectile-switch-project-action 'neotree-projectile-action)
    (setq projectile-completion-system 'ivy))
#+END_SRC

* Productivity Tools
** Completion Tools

*** Replace isearch with swiper

Use [[https://github.com/abo-abo/swiper#ivy][Ivy]] pacakge for minibuffer completion. <<Counsel Configuration>>

Configure =<C-s>= and =<C-r>= to activate swiper. And =swiper-C-r= function, which bind with =<C-r>= in local keymaps =swiper-map=, is copied from [[https://github.com/abo-abo/swiper/issues/1172#issuecomment-633148859][Issue's comment commented by SreenivasVRao from abo-abo/swiper#1172]].

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :straight t
    :demand
    :delight
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    (ivy-mode 1))

  (use-package counsel
    :straight t
    :demand
    :after ivy
    :bind ("M-x" . 'counsel-M-x))

  (use-package swiper
    :straight t
    :after ivy
    :demand
    :config
    (defun swiper-C-r (&optional arg)
      "Move cursor vertically down ARG candidates. If the input is empty, select the previous history element instead."
      (interactive "p")
      (if (string= ivy-text "")
          (ivy-previous-history-element 1)
        (ivy-previous-line arg)))
    :bind (("C-s" . 'swiper)
           ("C-r" . 'swiper)
           :map swiper-map
           ("C-r" . 'swiper-C-r)))
#+END_SRC

*** Code autocompletion

Use [[http://company-mode.github.io/][company-mode]] for text completion.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :straight t
    :delight
    :config
    (setq company-minimum-prefix-length 2)
    (setq company-idle-delay 0.1)
    (setq company-tooltip-align-annotations t)
    :hook ((emacs-lisp-mode . company-mode)
           (racket-mode . company-mode)
           (racket-repl-mode . company-mode)
           (python-mode . company-mode)))

  (use-package company-box
    :straight t
    :delight
    :hook (company-mode . company-box-mode))
#+END_SRC

*** Snippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :delight yas-minor-mode
    :hook (lsp-mode . yas-minor-mode))
#+END_SRC

** Editing Tools

Paredit is a minor mode for performing structured editing of S-expression data.
Paredit helps keep parentheses balanced and adds many keys for moving S-expressions and moving around in S-expressions. See [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][The Animated Guide to Paredit]] for more details.

Using =define-paredit-pair= macro to define full-width round, square and curly pairs, will generate some helpfull functions. And bind their opening and closing functions into local keymaps =paredit-mode-map=.

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :straight t
    :delight
    :hook ((emacs-lisp-mode . paredit-mode)
           (racket-mode . paredit-mode)
           (racket-repl-mode . paredit-mode))
    :config
    (define-paredit-pair ?\（ ?\） "full-round")
    (define-paredit-pair ?\【 ?\】 "full-square")
    (define-paredit-pair ?\「 ?\」 "full-curly")
    :bind (:map paredit-mode-map
                ("（" . 'paredit-open-full-round)
                ("）" . 'paredit-close-full-round)
                ("【" . 'paredit-open-full-square)
                ("】" . 'paredit-close-full-square)
                ("「" . 'paredit-open-full-curly)
                ("」" . 'paredit-close-full-curly)))
#+END_SRC

** Version Control Tools

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    :init
    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** GTD

*** Journal

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :straight t
    :config
    (setq org-journal-enable-agenda-integration t))
    (setq org-journal-dir "~/Sync/log")
#+END_SRC

*** WakaTime

#+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
    :straight t
    :config
    (global-wakatime-mode))
#+END_SRC

* Programing Configuration

** Python

*** Core -- LSP Supports

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :config (setq lsp-enable-snippet t))

  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode))

  (use-package lsp-python-ms
    :straight (:host github :repo "emacs-lsp/lsp-python-ms")
    :init
    (defvaralias 'lsp-python-ms-python-executable 'python-shell-interpreter)
    :hook ((python-mode
            . (lambda ()
                (require 'lsp-python-ms)
                (lsp-deferred)))))
#+END_SRC

*** Linting tools on the fly

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    :ensure t
    :init
    (setq-default lsp-modeline-diagnostics-enable nil)
    (defvaralias 'flycheck-python-flake8-executable 'python-shell-interpreter)
    (defun my/flycheck-mode-line-status-text (&optional status)
      "Get a text describing STATUS for use in the mode line.
  STATUS defaults to `flycheck-last-status-change' if omitted or
  nil."
      (pcase (or status flycheck-last-status-change)
        (`not-checked "not-checked")
        (`no-checker "no-checkers")
        (`running "checking")
        (`errored "error")
        (`finished
         (let-alist (flycheck-count-errors flycheck-current-errors)
           ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Properties.html#Special-Properties
           (propertize (format "%s/%s/%s"
                               (propertize (int-to-string (or .error 0))
                                           'face (list :foreground (my/get-color 'red)))
                               (propertize (int-to-string (or .warning 0))
                                           'face (list :foreground (my/get-color 'yellow)))
                               (propertize (int-to-string (or .info 0))
                                           'face (list :foreground (my/get-color 'green))))
                       'help-echo "mouse-1: Click me"
                       'mouse-face 'mode-line-highlight
                       ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Clickable-Text.html
                       'local-map (let ((map (make-sparse-keymap)))
                                    (define-key map [follow-link]
                                      (lambda (pos)
                                        (flycheck-list-errors)))
                                    map))
           ))
        (`interrupted "interrupted")
        (`suspicious "?")))
    :custom
    (flycheck-disabled-checkers
     '(python-mypy python-pylint))
    (flycheck-mode-line '(:eval (my/flycheck-mode-line-status-text)))
    :config
    (global-flycheck-mode)
    :hook
    ((lsp-diagnostics-mode
      . (lambda ()
          (require 'flycheck)
          ;; lsp checker being defined after diagnostics mode loaded.
          (flycheck-add-next-checker 'lsp
                                     'python-flake8)))))
#+END_SRC

*** Manage python packages via Poetry

#+BEGIN_SRC emacs-lisp
  (use-package poetry
    :straight t
    :commands poetry
    :config
    (defun poetry-get-python-executable ()
      (let ((venv_dir (poetry-get-virtualenv)))
        (when venv_dir (concat venv_dir "/bin/python"))))
    :hook ((python-mode
            . (lambda ()
                (unless python-shell-interpreter
                  ;; Configure the python shell interpreter
                  (require 'poetry)
                  (setq-local python-shell-interpreter
                              (poetry-get-python-executable)))))))
#+END_SRC

*** MISC

#+BEGIN_SRC emacs-lisp
  (use-package python-black
    :straight t
    :hook (python-mode . python-black-on-save-mode))

  (use-package python-isort
    :straight (:type git :host github :repo "linw1995/emacs-python-isort")
    :hook (python-mode . python-isort-on-save-mode))

  (add-hook 'python-mode-hook 'tabs-disable)
#+END_SRC

*** Q&A
**** How to set path of the Python executable explicitly?

Set the variable ~lsp-python-ms-python-executable~ before the =lsp-mode= being loaded.

First, add ~hack-local-variables-hook~ in =init.el= to make loading =lsp-mode= after the =.dir-locals.el= file of each project/workspace being loaded. And define a variable alias ~python-shell-interpreter~ in =init.el=.

#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'hack-local-variables-hook
               (lambda ()
                 (when (derived-mode-p 'python-mode)
                   (require 'lsp-python-ms)
                   (lsp)))) ; or lsp-deferred
  (defvaralias 'lsp-python-ms-python-executable 'python-shell-interpreter)
#+END_SRC

Second, create =.dir-locals.el= file in the root directory of project to specify the varibale ~python-shell-interpreter~ (alias of ~lsp-python-ms-python-executable~) for the project/workspace.p

#+BEGIN_SRC emacs-lisp :tangle no
  ((python-mode
    . ((python-shell-interpreter . "{absolute path of the Python executable}")))
#+END_SRC

If you use poetry to manage project, you can copy the below code instead.
It will check and configure with venv created by poetry.

#+BEGIN_SRC emacs-lisp :tangle no
  ((python-mode
    . ((eval
        . (progn (when (require 'poetry nil t)
                   (setq python-shell-interpreter
                         (poetry-get-python-executable))))))))
#+END_SRC

I add a hooking to set it by default via =poetry=. [[*Manage python packages via Poetry]]

**** How to configure flycheck

Create a =.dir-locals.el= file with the below code in root of each project/worksapce to configure =flycheck=.

#+BEGIN_SRC emacs-lisp :tangle no
  ((python-mode
    . ((eval
        . (progn (when (require 'flycheck nil t)
                   (flycheck-add-next-checker 'lsp 'python-flake8) ; configure checker python-flake8 run after lsp-mode
                   (setq-local flycheck-disabled-checkers '(python-pylint python-mypy)) ; disable checkers: pylint & mypy
                   ))))))
#+END_SRC

** Racket

#+BEGIN_SRC emacs-lisp
  (use-package racket-mode
    :straight t
    :hook (racket-mode . racket-xp-mode))
#+END_SRC

** Org

Use the built-in version of Org.

Configure =org-goto= with counsel. [[https://emacs.stackexchange.com/a/32625/29268][Solution is copyed from stackoverflow.]]
See also [[Counsel Configuration]].

#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight
    :init
    (defun org-capture-configure ()
      (setq org-capture-templates nil)
      (add-to-list 'org-capture-templates
                   '("w" "Web Collections" entry
                     (file+headline "~/Sync/org/inbox.org" "Web")
                     "* %U %:annotation\n\n%:initial\n\n%?")))
    (org-capture-configure)
    :config
    (defun org-goto-configuration ()
      (setq org-goto-interface 'outline-path-completion)
      (setq org-outline-path-complete-in-steps nil))
    (org-goto-configuration)
    (setq org-adapt-indentation nil)
    (setq org-catch-invisible-edits 'smart))

  (use-package ob-racket
    :straight
    (:host github :repo "hasu/emacs-ob-racket")
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((racket . t))))

#+END_SRC

Use htmlize to support exporting code with syntax highlighting.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :straight t)
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (use-package poly-markdown
    :straight t
    :hook (markdown-mode . poly-markdown-mode))
#+END_SRC

** Emacs Lisp

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-cask
    :straight t
    :hook ((emacs-lisp-mode flycheck-mode) . flycheck-cask-setup))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight (:type git :host github :repo "yoshiki/yaml-mode"))
#+END_SRC
